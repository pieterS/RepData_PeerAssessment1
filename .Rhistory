# open the graphics device
png(filename = "plot1.png"
,width = 560
,height = 480)
# plot the total emissions
with(Emission_set,plot(year
,Emissions
,type="l"
, main = "Total PM2.5 emissions in the United States"
,ylab="PM2.5 Emissions in millions of tons"
,xlab="year"
)
)
# close the graphics device
dev.off()
relevant_SCC_codes <- as.character(SCC[grepl("Veh",SCC$Short.Name),"SCC"])
SCC[relevant_SCC_codes,]
Emission_set <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year) %>% summarise(Emissions = sum(Emissions))
Emission_set$Emissions <- Emission_set$Emissions/1000
Emission_set <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year) %>% summarise(Emissions = sum(Emissions))
# open the graphics device
png(filename = "plot5.png"
,width = 560
,height = 480)
# plot the total emissions
with(Emission_set,plot(year
,Emissions,type="l"
, main = "Vehicle related PM2.5 emissions in Baltimore City"
,ylab="PM2.5 Emissions in tons"
,xlab="year"
)
)
# close the graphics device
dev.off()
Emission_set <- NEI %>% filter(fips == "24510"| fips == "06037") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
Emission_set
Emission_set$fips <- if(Emission_set$fips == "06037") "Los Angeles County" else "Baltimore City"
?apply
apply(Emission_set$fips,1,function(x) if(x == "06037") "Los Angeles County" else "Baltimore City")
apply(Emission_set$fips,2,function(x) if(x == "06037") "Los Angeles County" else "Baltimore City")
?sub
sub("06037","Los Angeles County",Emission_set$fips)
Emission_set
Emission_set <- NEI %>% filter(fips == "24510"| fips == "06037") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
Emission_set
Emission_set
sub("06037","Los Angeles County",Emission_set$fips)
Emission_set <- NEI %>% filter(fips == "24510"| fips == "06037") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
Emission_set$fips <- sub("06037","Los Angeles County",Emission_set$fips)
Emission_set$fips <- sub("24510","Baltimore City",Emission_set$fips)
Emission_set$fips <- sub("06037","Los Angeles County",Emission_set$fips)
Emission_set
Emission_set <- NEI %>% filter(fips == "24510"| fips == "06037") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions)) %>%
mutate(Emissions_Normalized=Emissions/mean(Emissions,na.rm=TRUE))
Emission_set
Emission_set <- NEI %>% filter(fips == "24510"| fips == "06037") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions)) %>%
group_by(year,fips) %>% mutate(Emissions = normalit(Emissions))
Emission_set <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
Emission_set
Emission_set <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions)) %>%
mutate(Emissions = Emissions/max(Emissions))
Emission_set
Emission_set <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions)) %>%
mutate(Emissions = Emissions/mean(Emissions))
Emission_set <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions)) %>%
mutate(Emissions = Emissions/mean(Emissions))
Emission_set
Emission_set <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions)) %>%
group_by(year,fips) %>% mutate(Emissions = Emissions/mean(Emissions))
Emission_set
Emission_set_BC <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
max_Emission_BC <- max(Emission_set_BC)
Emission_set_BC$Emissions <- Emission_set_BC$Emissions/max_Emision_BC
max_Emission_BC <- max(Emission_set_BC$Emissions)
Emission_set_BC$Emissions <- Emission_set_BC$Emissions/max_Emision_BC
Emission_set_BC <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
max_Emission_BC <- max(Emission_set_BC$Emissions)
Emission_set_BC$Emissions <- Emission_set_BC$Emissions/max_Emisison_BC
Emission_set_BC <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
max_Emission_BC <- max(Emission_set_BC$Emissions)
Emission_set_BC$Emissions <- Emission_set_BC$Emissions/max_Emission_BC
Emission_set_BC
Emission_set_LA <- NEI %>% filter(fips == "06037") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
max_Emission_LA <- max(Emission_set_BC$Emissions)
Emission_set_LA$Emissions <- Emission_set_BC$Emissions/max_Emission_BC
Emission_set <- rbind(Emission_set_BC,Emission_set_LA)
Emission_set
Emission_set_BC <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
max_Emission_BC <- max(Emission_set_BC$Emissions)
Emission_set_BC$Emissions <- Emission_set_BC$Emissions/max_Emission_BC
Emission_set_LA <- NEI %>% filter(fips == "06037") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
max_Emission_LA <- max(Emission_set_LA$Emissions)
Emission_set_LA$Emissions <- Emission_set_LA$Emissions/max_Emission_LA
Emission_set <- rbind(Emission_set_BC,Emission_set_LA)
Emission_set$fips <- sub("06037","Los Angeles County",Emission_set$fips)
Emission_set$fips <- sub("24510","Baltimore City",Emission_set$fips)
Emission_set
Emission_set$fips <- as.factor(Emission_set$fips)
# open the graphics device
png(filename = "plot6.png"
,width = 560
,height = 480)
#define the settings
d <- ggplot(Emission_set,aes(year,Emissions,color=fips))
# plot the details
p <- d +
geom_line() +
ggtitle("PM2.5 emissions in Baltimore city and Los Angeles County") +
ylab("PM2.5 emissions (normalized")
print(p)
dev.off()
colnames(Emission_set)[2] <- "city"
# open the graphics device
png(filename = "plot6.png"
,width = 560
,height = 480)
#define the settings
d <- ggplot(Emission_set,aes(year,Emissions,color=city))
# plot the details
p <- d +
geom_line() +
ggtitle("PM2.5 emissions in Baltimore city and Los Angeles County") +
ylab("PM2.5 emissions (normalized)")
print(p)
dev.off()
png(filename = "plot6.png"
,width = 560
,height = 480)
#define the settings
d <- ggplot(Emission_set,aes(year,Emissions,color=location))
# plot the details
p <- d +
geom_line() +
ggtitle("PM2.5 emissions from motor vehicles Baltimore city and Los Angeles County") +
ylab("PM2.5 emissions (normalized)")
print(p)
dev.off()
png(filename = "plot6.png"
,width = 560
,height = 480)
#define the settings
d <- ggplot(Emission_set,aes(year,Emissions,color=location))
# plot the details
p <- d +
geom_line() +
ggtitle("PM2.5 emissions from motor vehicles") +
ylab("PM2.5 emissions (normalized)")
print(p)
dev.off()
# assuming non-motor vehicles have no emissions, all vehicles are motor vehicles
relevant_SCC_codes <- as.character(SCC[grepl("Veh",SCC$Short.Name),"SCC"])
#create a vehicle emission dataframe
# for Baltimore City
# and Los Angeles County
# and divide by the maxvalue to normalize
Emission_set_BC <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
max_Emission_BC <- max(Emission_set_BC$Emissions)
Emission_set_BC$Emissions <- Emission_set_BC$Emissions/max_Emission_BC
Emission_set_LA <- NEI %>% filter(fips == "06037") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year,fips) %>% summarise(Emissions = sum(Emissions))
max_Emission_LA <- max(Emission_set_LA$Emissions)
Emission_set_LA$Emissions <- Emission_set_LA$Emissions/max_Emission_LA
Emission_set <- rbind(Emission_set_BC,Emission_set_LA)
Emission_set$fips <- sub("06037","Los Angeles County",Emission_set$fips)
Emission_set$fips <- sub("24510","Baltimore City",Emission_set$fips)
Emission_set$fips <- as.factor(Emission_set$fips)
colnames(Emission_set)[2] <- "location"
# open the graphics device
png(filename = "plot6.png"
,width = 560
,height = 480)
#define the settings
d <- ggplot(Emission_set,aes(year,Emissions,color=location))
# plot the details
p <- d +
geom_line() +
ggtitle("PM2.5 emissions from motor vehicles") +
ylab("PM2.5 emissions (normalized)")
print(p)
dev.off()
# load libraries
library(dplyr)
library(ggplot2)
# read the datasets
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
# find the vehicle related SCC codes
# assuming non-motor vehicles have no emissions
relevant_SCC_codes <- as.character(SCC[grepl("Veh",SCC$Short.Name),"SCC"])
#create a vehicle emission dataframe
#for Baltimore City
Emission_set <- NEI %>% filter(fips == "24510") %>%
filter(SCC %in% relevant_SCC_codes) %>%
group_by(year) %>% summarise(Emissions = sum(Emissions))
# open the graphics device
png(filename = "plot5.png"
,width = 560
,height = 480)
# plot the total emissions
with(Emission_set,plot(year
,Emissions,type="l"
, main = "Vehicle related PM2.5 emissions in Baltimore City"
,ylab="PM2.5 Emissions in tons"
,xlab="year"
)
)
# close the graphics device
dev.off()
a <- read.csv("getdata-data-ss06hid.csv")
names(a)
?strsplit
strsplit(names(a),"wgtp")
gdp <- read.csv("getdata-data-GDP.csv")
View(gdp)
gdp <- read.table("getdata-data-GDP.csv",sep=",",colnames=c("","Rank","","Economy","Mill US dol",,,,,),skip = 5, header= FALSE)
gdp <- read.table("getdata-data-GDP.csv",sep=",",skip = 5,nrows=236, header= FALSE)
gdp <- read.table("getdata-data-GDP.csv",sep=",",colnames=c("","Rank","","Economy","Mill US dol",,,,,),skip = 5, header= FALSE)
gdp <- read.table("getdata-data-GDP.csv",sep=",",skip = 5, header= FALSE)
gdp <- read.table("getdata-data-GDP.csv",sep=",",skip = 5,nrows=236, header= FALSE,quote="")
gdp <- read.table("getdata-data-GDP.csv",sep=",",colnames=c("","Rank","","Economy","Mill US dol",,,,),skip = 5, header= FALSE)
gdp <- read.table("getdata-data-GDP.csv",sep=",",colnames=c("","Rank","","Economy","Mill US dol",,,,,),skip = 5, header= FALSE)
gdp <- read.table("getdata-data-GDP.csv",sep=",",colnames=c("","Rank","","Economy","Mill US dol","","","","",""),skip = 5, header= FALSE)
gdp <- read.table("getdata-data-GDP.csv",sep=",",quote = "\"",skip = 5, header= FALSE)
View(gdp)
gdp <- read.table("getdata-data-GDP.csv",sep=",",quote = "\"",skip = 5, header= FALSE,nrows=195)
View(gdp)
gdp <- read.table("getdata-data-GDP.csv",sep=",",quote = "\"",skip = 5, header= FALSE,nrows=190)
View(gdp)
gsub(",","",gdp$V5)
a<- gsub(",","",gdp$V5)
as.numeric(a)
mean(as.numeric(a))
grep("^United",gdp$V4)
ed <- read.csv("getdata-data-EDSTATS_Country.csv")
View(ed)
grepl("Fiscal year end: June",ed$Special.Notes)
ed[grepl("Fiscal year end: June",ed$Special.Notes),]
merge(gdp,ed[grepl("Fiscal year end: June",ed$Special.Notes),],by.x="V1",by.y="CountryCode")
library(quantmod)
install.paclages("quantmod")
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
library(lubridate)
install.packages("lubridate")
library(lubridate)
dates <- ymd(sampleTimes)
dates
??lubridate
year(dates)
dates(year(dates),2012)
dates[year(dates),2012]
dates[year(dates)==2012]
wday(dates)
wday(dates,label=TRUE)
wday(dates)
dates[year(dates)==2012 & wday(dates)==2]
setwd("~/Github/RepData_PeerAssessment1")
unz("activity.zip")
unz("activity.zip","activity.dat")
unz("activity.zip","activity.dat")?unz()
?unz
activity <- read.csv(unz("activity.zip","activity.dat"))
activity <- read.csv(unz("activity.zip"))
activity <- read.csv(unz("activity.zip","activity.csv"))
activity <- read.csv(unz("activity.zip","activity.csv"))
View(activity)
?read.csv
activity <- read.csv(unz("activity.zip","activity.csv")
,stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
library(dplyr)
activity %>% group_by(date) %>% summarise(total_steps = sum(steps,na.rm=TRUE))
activity.daily <- activity %>%
group_by(date) %>%
summarise(total_steps = sum(steps,na.rm=TRUE))
histogram(activity.daily$total_steps)
hist(activity.daily$total_steps)
?hist
hist(activity.daily$total_steps,xlab="Steps taken",main="Histogram of steps taken per day")
mean_steps <- mean(activity.daily$total_steps)
median_steps <- median(activity.daily$total_steps)
library(dplyr)
activity.interval <- activity %>%
group_by(interval) %>%
summarise(mean_steps = mean(steps,na.rm=TRUE))
plot(activity.interval$interval,activity.interval$mean_steps,type = l)
plot(activity.interval$interval,activity.interval$mean_steps,type = "l")
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern")
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", box = FALSE)
?plot
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE)
max(activity$interval)
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE,ylim=c(0,2400))
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE,ylim=c(0,2500))
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE,xlim=c(0,2500))
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE,xlim=c(0,2400))
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE,xlim=c(0,2400),xtics=200)
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE,xlim=c(0,2500),xtics=200)
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE,xlim=c(0,2500))
plot(activity.interval$interval,activity.interval$mean_steps,type = "l",xlab= "interval", ylab="mean number of steps", main = "Average daily activity pattern", frame.plot = FALSE,xlim=c(0,2500))
max_steps_interval <- activity.interval[activity.interval$mean_steps = max(activity.interval$mean_steps),]
max_steps_interval <- activity.interval[activity.interval$mean_steps == max(activity.interval$mean_steps),]
max_steps_interval <- activity.interval[activity.interval$mean_steps == max(activity.interval$mean_steps),interval]
max_steps_interval <- activity.interval[activity.interval$mean_steps == max(activity.interval$mean_steps),"interval"]
max_steps_interval <- activity.interval[
activity.interval$mean_steps == max(activity.interval$mean_steps),
"interval"]
is.na(activity)
sum(is.na(activity$steps))
sum(is.na(activity))
?is.na
?ifelse
mutate(activity,
imputed_steps = ifelse(is.na(steps),1,steps)
)
activity.imputed <- mutate(activity,
imputed_steps = ifelse(is.na(steps),1,steps)
)
activity.imputed <- mutate(activity,
imputed_steps = ifelse(is.na(steps),
activity.interval[interval == activity.interval$interval],"steps") )
View(activity.imputed)
activity.imputed <- mutate(activity,
imputed_steps = ifelse(is.na(steps),
activity.interval[interval == activity.interval$interval,
"steps"],steps) )
View(activity.imputed)
activity.imputed <- mutate(activity,
imputed_steps = ifelse(is.na(steps),
activity.interval[interval == activity.interval$interval,
"mean_steps"],steps) )
View(activity.imputed)
activity.interval[0 == activity.interval$interval,
+                                                 "mean_steps"]
activity.interval[0 == activity.interval$interval,"mean_steps"]
activity.imputed <- mutate(activity,
imputed_steps = ifelse(is.na(steps),
activity.interval[interval == activity.interval$interval,"mean_steps"],steps) )
View(activity.imputed)
?reaplce
?replace
activity.imputed <- mutate(activity,
imputed_steps = ifelse(is.na(steps),
activity.interval[activity.imputed$interval == activity.interval$interval,"mean_steps"],steps) )
View(activity.imputed)
activity.imputed <- merge(activity,activity.interval,by="interval")
View(activity.imputed)
activity.imputed <- mutate(activity,
steps = ifelse(is.na(steps),
mean_steps
,steps) )
activity.imputed <- mutate(activity.imputed,
steps.imp = ifelse(is.na(steps),
activity.imputed$mean_steps
,steps) )
activity.imputed <- merge(activity,activity.interval,by="interval")
activity.imputed <- mutate(activity.imputed,
steps.imp = ifelse(is.na(steps),
activity.imputed$mean_steps
,steps) )
View(activity.imputed)
View(activity.imputed)
activity.imputed <- merge(activity,activity.interval,by="interval")
activity.imputed <- mutate(activity.imputed,
steps = ifelse(is.na(steps),
activity.imputed$mean_steps
,steps) )
View(activity.imputed)
sum(is,na(activity.imputed))
sum(is.na(activity.imputed))
activity.imputed$mean_steps <- NULL
activity.imputed <- merge(activity,activity.interval,by="interval")
activity.imputed <- mutate(activity.imputed,
steps = ifelse(is.na(steps),
activity.imputed$mean_steps
,steps) )
activity.imputed$mean_steps <- NULL
activity.imputed <- activity.imputed[c("steps","date","interval")]
mean_steps_imp <- mean(activity.imputed.daily$total_steps)
median_steps_imp <- median(activity.imputed.daily$total_steps)
activity.imputed.daily <- activity.imputed %>%
group_by(date) %>%
summarise(total_steps = sum(steps,na.rm=TRUE))
hist(activity.imputed.daily$total_steps,
xlab="Steps taken",
main="Histogram of steps taken per day",
sub="Histogram based on imputed data."
)
mean_steps_imp <- mean(activity.imputed.daily$total_steps)
median_steps_imp <- median(activity.imputed.daily$total_steps)
?weekdays
weekday(activity$date)
weekdays(activity$date)
activity.wknd <- data.frame(activity.imputed,weekdays(activity.imputed$date))
library(lattice)
activity.wknd <- data.frame(activity.imputed,ifelse(weekdays(activity.imputed$date) %in% c('Saturday','Sunday'),'Weekend','Weekday')
)
View(activity.wknd)
activity.wknd <- data.frame(activity.imputed,
ifelse(weekdays(activity.imputed$date) %in%
c('Saturday','Sunday'),
'Weekend',
'Weekday')
,weekdays(activity.imputed$date))
View(activity.wknd)
activity.days<- data.frame(activity.imputed,
ifelse(weekdays(activity.imputed$date) %in%
c('Saturday','Sunday'),
'Weekend',
'Weekday')
)
colnames(activity.days)[4] <- "daytype"
activity.interval <- activity.days %>%
group_by(interval,daytype) %>%
summarise(mean_steps = mean(steps,na.rm=TRUE))
View(activity.interval)
activity.interval.wknd <- activity.days %>%
group_by(interval,daytype) %>%
summarise(mean_steps = mean(steps,na.rm=TRUE))
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype))
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype),
type = "l")
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype),
layout=c(1,2))
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype),
layout=c(2,1))
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype),
layout=(c(1,2))
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype),
layout=(c(2,1))
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype,
layout=(c(2,1)))
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype,
layout=c(1,2))
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype,
layout=(c(1,2))
)
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype,
layout=(c(1,2))
)
)
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype,
layout=c(1,2)
)
)
with(activity.interval.wknd,
xyplot(mean_steps~interval|daytype,
layout=c(1,2),
type="l"
)
)
mean_steps
mean_steps_imp
eval(mean_steps_imp)
??evaluate
base::eval(mean_steps_imp)
force::eval(mean_steps_imp)
force(mean_steps_imp)
?I
